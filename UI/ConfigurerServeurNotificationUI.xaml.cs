using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Xml;
using Ecole.BusinessLogic;
using Ecole.Utilitaire;
using System.IO;

namespace Ecole.UI
{
    /// <summary>
    /// Interaction logic for ConfigurerServeurNotificationUI.xaml
    /// </summary>
    public partial class ConfigurerServeurNotificationUI : Window
    {
        GestionNotificationBL notificationBL;
        string app_folder;
        public ConfigurerServeurNotificationUI()
        {
            InitializeComponent();
            notificationBL = new GestionNotificationBL();
            app_folder = notificationBL.getParametre().REPERTOIRE_PHOTO;
            initialiserElement();
        }

        private void initialiserElement()
        {
            try
            {

                if (Tools.DecryptFile(app_folder + "serveurNotification.xml", app_folder + "serveurNotification1.xml"))
                    Console.WriteLine("decrytion succeed");
                else
                    Console.WriteLine("decrytion failed");

                XmlDocument xmlDoc = new XmlDocument();
                xmlDoc.Load(app_folder + "serveurNotification1.xml");

                //XmlNodeList nodeList = xmlDoc.GetElementsByTagName("Email");
                //foreach (XmlNode node in nodeList)
                //{
                //    txtServeurEmail.Text = node.ChildNodes.Item(0).InnerText;
                //    txtPortEmail.Text = node.ChildNodes.Item(1).InnerText;
                //    string ssl = node.ChildNodes.Item(2).InnerText;
                //    if (ssl == "OUI")
                //        radioSslOui.IsChecked = true;
                //    else
                //        radioSslNon.IsChecked = true;
                //    txtEmail.Text = node.ChildNodes.Item(3).InnerText;
                //}

                XmlNodeList nodeList = xmlDoc.GetElementsByTagName("SMS");
                foreach (XmlNode node in nodeList)
                {
                    txtServeurSMS.Text = node.ChildNodes.Item(0).InnerText;
                    txtNumero.Text = node.ChildNodes.Item(1).InnerText;
                    txtNomUtilisateur.Text = node.ChildNodes.Item(2).InnerText;
                }

                if (Tools.EncryptFile(app_folder + "serveurNotification1.xml", app_folder + "serveurNotification.xml"))
                    Console.WriteLine("encrytion succeed");
                else
                    Console.WriteLine("encrytion failed");
                File.Delete(System.IO.Path.GetFullPath(app_folder + "serveurNotification1.xml"));
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
        }

        private void cmdValider_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                XmlWriterSettings settings = new XmlWriterSettings();
                settings.Indent = true;

                XmlWriter writer = XmlWriter.Create(app_folder + "serveurNotification1.xml", settings);
                writer.WriteStartDocument();
                writer.WriteComment("This file is generated by the program.");
                writer.WriteStartElement("Configuration");

                //if (pwdEmail.Password != pwdEmailConfirm.Password)
                //{
                //    MessageBox.Show("Les valeurs des mots de passe des emails ne correspondent pas", "School brain:Alerte", MessageBoxButton.OK, MessageBoxImage.Exclamation);
                //}
                //else
                //{
                //    writer.WriteStartElement("Email");
                //    writer.WriteElementString("serveur", txtServeurEmail.Text);
                //    writer.WriteElementString("port", txtPortEmail.Text);
                //    if ((bool)radioSslNon.IsChecked)
                //        writer.WriteElementString("ssl", "NON");
                //    else
                //        if ((bool)radioSslOui.IsChecked)
                //            writer.WriteElementString("ssl", "OUI");
                //    writer.WriteElementString("email", txtEmail.Text);
                //    writer.WriteElementString("password", pwdEmail.Password);
                //    writer.WriteEndElement();
                //}

                if (pwdSMS.Password != "")
                    if (pwdSMS.Password == pwdSMSConfirm.Password)
                    {
                        writer.WriteStartElement("SMS");
                        writer.WriteElementString("url", txtServeurSMS.Text);
                        writer.WriteElementString("numero", txtNumero.Text);
                        writer.WriteElementString("username", txtNomUtilisateur.Text);
                        writer.WriteElementString("password", pwdSMS.Password);
                    }
                    else
                        MessageBox.Show("Les valeurs des mots de passe des sms ne correspondent pas", "School brain:Alerte", MessageBoxButton.OK, MessageBoxImage.Exclamation);

                writer.WriteEndElement();
                writer.WriteEndDocument();

                writer.Flush();
                writer.Close();

                if (Tools.EncryptFile(app_folder + "serveurNotification1.xml", app_folder + "serveurNotification.xml"))
                    MessageBox.Show("encrytion succeed");
                else
                    MessageBox.Show("encrytion failed");
                MessageBox.Show("Enregistrement reussi", "School brain:Information", MessageBoxButton.OK, MessageBoxImage.Information);
                File.Delete(System.IO.Path.GetFullPath(app_folder + "serveurNotification1.xml"));
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }

        private void cmdFermer_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
            List<string[]> tab = new List<string[]>();
        }
    }
}
